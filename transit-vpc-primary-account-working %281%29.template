{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "(SO0001) - Transit VPC: This template creates a dedicated transit VPC with Juniper VSRX for routing traffic. ***NOTE*** You must first subscribe to the appropriate Juniper VSRX marketplace BYOL or License Included AMI from the AWS Marketplace before you launch this template. Version 3",

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "Default" : "Lab"
    },
    "TerminationProtection" : {
      "Description" : "Enable termination protection on the VSRX EC2 instances to avoid accidential VSRX termination?",
      "Type" : "String",
      "Default" : "Yes",
      "AllowedValues" : ["Yes", "No"]
    },
    "PreferredPathTag" : {
      "Description" : "Tag to use to configure a preferred VSRX VPN endpoint to control traffic flow through the Transit VPC VSRX (e.g. when integrating with CPE).",
      "Type" : "String",
      "Default" : "transitvpc:preferred-path"
    },
    "SpokeTag" : {
      "Description" : "Tag to use to identify spoke VPCs to connect to Transit VPC.",
      "Type" : "String",
      "Default" : "transitvpc:spoke"
    },
    "SpokeTagValue" : {
      "Description" : "Tag value to use to identify spoke VPCs to connect to Transit VPC.",
      "Type" : "String",
      "Default" : "true"
    },
    "BgpAsn" : {
      "Description" : "BGP ASN to use for Transit VPC.",
      "Type" : "String",
      "Default" : "64512"
    },
    "VpcCidr" : {
      "Description" : "CIDR block for Transit VPC.",
      "Type" : "String",
      "Default" : "200.0.0.0/16"
    },
    "PubSubnet11" : {
      "Description" : "Address range for Transit VPC subnet to be created in AZ1.",
      "Type" : "String",
      "Default" : "200.0.254.0/24"
    },
    "PubSubnet12" : {
      "Description" : "Address range for Transit VPC subnet to be created in AZ1.",
      "Type" : "String",
      "Default" : "200.0.1.0/24"
    },
    "PubSubnet21" : {
      "Description" : "Address range for Transit VPC subnet to be created in AZ2.",
      "Type" : "String",
      "Default" : "200.0.253.0/24"
    },
    "PubSubnet22" : {
      "Description" : "Address range for Transit VPC subnet to be created in AZ2.",
      "Type" : "String",
      "Default" : "200.0.2.0/24"
    },
    "VSRXType" : {
      "Description" : "Maximum network througput required for VSRX instances.",
      "Type" : "String",
      "Default" : "C4.Xlarge",
      "AllowedValues" : [ "C4.Xlarge" ]
    },
    "LicenseModel" : {
      "Description" : "Choose between BYOL (Bring Your Own License) and License Included license models. Remember to first subscribe the the appropriate Marketplace AMI!",
      "Type" : "String",
      "Default" : "LicenseIncluded",
      "AllowedValues" : ["LicenseIncluded", "BYOL"]
    },
    "S3Prefix" : {
      "Description" : "S3 prefix to append before S3 key names.",
      "Type" : "String",
      "Default" : "vpnconfigs/"
    },
    "AccountId" : {
      "Description" : "Another AWS Account ID to authorize access to VPN Config S3 bucket (for example bucket and KMS key policies).",
      "Type" : "String",
      "Default" : ""
    },
    "SendAnonymousData": {
        "Description": "Choose to send anonymous data to AWS.",
        "Type": "String",
        "Default": "Yes",
        "AllowedValues": [
            "Yes",
            "No"
        ]
    }
  },
  "Conditions" : {
    "AuthorizeAnotherAccount" : {"Fn::Not" : [
    {"Fn::Equals" : [
        {"Ref": "AccountId"}, 
        ""
    ]}
    ]},
   "EnableTerm" : {"Fn::Equals" : [{"Ref" : "TerminationProtection"}, "Yes"]},
   "SendData" : {"Fn::Equals" : [{"Ref" : "SendAnonymousData"}, "Yes"]}
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
     "ParameterGroups" : [
      {
        "Label" : { "default":"Juniper VSRX Configuration" },
        "Parameters" : [ "VSRXType", "KeyName", "LicenseModel", "TerminationProtection" ]
      },
      {
        "Label" : { "default":"AWS Service Configuration" },
        "Parameters" : [ "S3Prefix", "AccountId" ]
      },
      {
        "Label" : { "default" : "Network Configuration" },
        "Parameters" : [ "VpcCidr", "PubSubnet11", "PubSubnet12", "PubSubnet21","PubSubnet22", "BgpAsn","SpokeTag","SpokeTagValue","PreferredPathTag" ]
      },
      {
        "Label": { "default": "Anonymous Metrics Request" },
        "Parameters": [ "SendAnonymousData" ]
      }
     ],
     "ParameterLabels" : {
      "BgpAsn" : { "default" : "Transit VPC BGP ASN" },
      "SpokeTag" : { "default" : "Spoke VPC Tag Name" },
      "SpokeTagValue" : { "default" : "Spoke VPC Tag Value" },
      "PreferredPathTag" : { "default" : "Preferred VPN Endpoint Tag Name" },
      "VpcCidr" : { "default" : "Transit VPC CIDR Block" },
      "PubSubnet11" : { "default" : "vSRX1- 1st Subnet Network" },
      "PubSubnet12" : { "default" : "vSRX1- 2nd Subnet Network" },
      "PubSubnet21" : { "default" : "vSRX2- 1st Subnet Network" },
      "PubSubnet22" : { "default" : "vSRX2- 2nd Subnet Network" },
      "VSRXType" : { "default" : "VSRX Throughput Requirements" },
      "KeyName" : { "default" : "SSH Key to access VSRX" },
      "S3Prefix" : { "default" : "Prefix for S3 Objects" },
      "LicenseModel" : { "default" : "License Model" },
      "TerminationProtection" : { "default" : "Enable Termination Protection" },
      "AccountId" : { "default" : "Additional AWS Account ID (Optional)" }
     }
    }
  },
  "Mappings" : {
    "Function" : {
      "Configurator" : { 
    "CodeLocation" : "juniper-transit-vpc-1/transit-vpc-push-juniper-config.zip",
    "CodeRegion" : "us-east-1",
    "Name" : "juniper-configurator",
        "Description": "Transit VPC: This function is invoked when a generic VPN configuration is placed in an S3 bucket - it converts the generic information into Junos OS specific commands and pushes the config to transit VPC routers.",
        "Runtime": "python2.7",
        "Timeout": "300",
        "MemorySize": "128"
      },
      "Poller" : { 
    "CodeLocation" : "juniper-transit-vpc-1/transit-vpc-poller.py",
    "CodeRegion" : "us-east-1",
    "Name" : "vgw-poller",
        "Description": "Transit VPC: Poller function responsible for identifying specifically tagged VGWs and creating VPN connections to transit VPC.",
        "Runtime": "python2.7",
        "Timeout": "120",
        "MemorySize": "128"
      },
      "FindReplace" : {
    "S3BucketID" : "%BUCKET_NAME%",
    "S3PrefixID" : "%PREFIX%",
    "Deliminator" : "|"
      },
      "vSRX" : {
    "UserName" : "root",
    "PasswordLength" : "15",
    "PrivateKey" : "prikey.pem",
    "PublicKey" : "pubkey.pem"
      }
    },
    "JunipervSRXAMI" : {
      "us-east-1"      : { "BYOL" : "ami-080f4168", "LicenseIncluded" : "ami-a7a94ab1" },
      "us-east-2"      : { "BYOL" : "ami-a6d78cc3Â ", "LicenseIncluded" : "ami-6e6f4a0b" },
      "us-west-2"      : { "BYOL" : "ami-c5d60aa5", "LicenseIncluded" : "ami-bf3183df" },
      "us-west-1"      : { "BYOL" : "ami-080f4168", "LicenseIncluded" : "ami-d65506b6" },
      "eu-west-1"      : { "BYOL" : "ami-9f1a60ec", "LicenseIncluded" : "ami-222a0151" },
      "eu-central-1"   : { "BYOL" : "ami-c714e9a8", "LicenseIncluded" : "ami-a47db0cb" },
      "ap-south-1"     : { "BYOL" : "ami-93d0a5fc", "LicenseIncluded" : "ami-f9acda96" },
      "ap-southeast-1" : { "BYOL" : "ami-3894315b", "LicenseIncluded" : "ami-1ac06b79" },
      "ap-southeast-2" : { "BYOL" : "ami-dc0535bf", "LicenseIncluded" : "ami-06abae65" },
      "ap-northeast-1" : { "BYOL" : "ami-fe588b9f", "LicenseIncluded" : "ami-0d6a176a" },
      "ap-northeast-2" : { "BYOL" : "aami-7c5b8e12", "LicenseIncluded" : "ami-2f6eb841" },
      "sa-east-1"      : { "BYOL" : "ami-d8bc2fb4", "LicenseIncluded" : "ami-f3bc269f" }

    },
    "vSRXInstance" : {
      "C4.Xlarge"   : { "Type" : "c4.xlarge",   "Bandwidth" : "500000" }
    }
  },
  "Resources" : {
    "VPNConfigS3Bucket" : {
      "Type" : "AWS::S3::Bucket"
    },
    "VPNConfigBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "Bucket" : {"Ref" : "VPNConfigS3Bucket" },
        "PolicyDocument": {
          "Statement":[ {
        "Sid": "DenyUnEncryptedObjectUploads",
        "Effect": "Deny",
        "Principal": "*",
        "Action": "s3:PutObject",
        "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" },"/",{ "Ref" : "S3Prefix" }, "*" ]]},
        "Condition": {
        "StringNotEquals": {
          "s3:x-amz-server-side-encryption": "aws:kms"
        }
        }
      },
      {
        "Action":["s3:GetObject", "s3:PutObject", "s3:PutObjectAcl"],
        "Effect":"Allow",
        "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" },"/",{ "Ref" : "S3Prefix" }, "*" ]]},
        "Principal": {
        "AWS" : [{ "Fn::Join" : ["", ["arn:aws:iam::",{"Fn::If": ["AuthorizeAnotherAccount", {"Ref" : "AccountId" }, { "Ref" : "AWS::AccountId" } ]}, ":root" ]]}]
        }
      }]
        }
      }
    },
    "KMSKey" : {
      "Type" : "AWS::KMS::Key",
      "Properties" : {
        "Description" : "TransitVPC CMK for S3 SSE-KMS",
        "KeyPolicy" : {
          "Version": "2012-10-17",
          "Id": "transit-vpc-1",
          "Statement": [ {
            "Sid": "Enable IAM User Permissions",
            "Effect": "Allow",
            "Principal": { "AWS": [
        { "Fn::Join" : ["", ["arn:aws:iam::",{ "Ref" : "AWS::AccountId" }, ":root" ]]}
        ] },
            "Action": [
              "kms:*"
            ], 
            "Resource": "*"
          },
      {
            "Sid": "Allow use of the key",
            "Effect": "Allow",
            "Principal": { "AWS": [
        { "Fn::Join" : ["", ["arn:aws:iam::",{"Fn::If": ["AuthorizeAnotherAccount", {"Ref" : "AccountId" }, { "Ref" : "AWS::AccountId" } ]}, ":root" ]]},
        { "Fn::GetAtt" : ["SolutionHelperRole", "Arn"] },
        { "Fn::GetAtt" : ["JuniperConfigFunctionRole", "Arn"] },
        { "Fn::GetAtt" : ["TransitVpcPollerRole", "Arn"] }
        ] },
            "Action": [
              "kms:Encrypt",
              "kms:Decrypt",
              "kms:ReEncrypt*",
              "kms:GenerateDataKey*",
              "kms:DescribeKey"
            ], 
            "Resource": "*"
          } ]
        }
      }
    },
    "TransitVPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Ref" : "VpcCidr" },
        "Tags" : [
          { "Key" : "Name", "Value" : "Transit VPC" }
        ]
      }
    },
    "VPCPubSub11" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "TransitVPC" },
        "CidrBlock" : { "Ref" : "PubSubnet11" },
        "AvailabilityZone" : { "Fn::Select": ["0", {"Fn::GetAZs": ""}] },
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" },
          { "Key" : "Name", "Value" : "Transit VPC Subnet1" }
        ]
      }
    },
    "VPCPubSub12" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "TransitVPC" },
        "CidrBlock" : { "Ref" : "PubSubnet12" },
        "AvailabilityZone" : { "Fn::Select": ["0", {"Fn::GetAZs": ""}] },
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" },
          { "Key" : "Name", "Value" : "Transit VPC Subnet1" }
        ]
      }
    },
    "VPCPubSub21" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "TransitVPC" },
        "CidrBlock" : { "Ref" : "PubSubnet21" },
        "AvailabilityZone" : { "Fn::Select": ["1", {"Fn::GetAZs": ""}] },
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" },
          { "Key" : "Name", "Value" : "Transit VPC Subnet2" }
        ]
      }
    },
    "VPCPubSub22" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "TransitVPC" },
        "CidrBlock" : { "Ref" : "PubSubnet22" },
        "AvailabilityZone" : { "Fn::Select": ["1", {"Fn::GetAZs": ""}] },
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" },
          { "Key" : "Name", "Value" : "Transit VPC Subnet1" }
        ]
      }
    },
    "IGW" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Name", "Value" : "Transit VPC IGW" }
        ]
      }
    },
    "IGWToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "TransitVPC" },
         "InternetGatewayId" : { "Ref" : "IGW" }
       }
    },
    "VPCRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "TransitVPC" },
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" },
          { "Key" : "Name", "Value" : "Transit VPC" }
        ]
      }
    },
    "VPCPublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "VPCRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "IGW" }
      }
    },
    "S3Endpoint" : {
      "Type" : "AWS::EC2::VPCEndpoint",
      "Properties" : {
        "PolicyDocument" : {
          "Version":"2012-10-17",
          "Statement":[{
            "Effect":"Allow",
            "Principal": "*",
            "Action":["s3:*"],
            "Resource":["*"]
          }]
        },
        "RouteTableIds" : [ {"Ref" : "VPCRouteTable"} ],
        "ServiceName" : { "Fn::Join": [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".s3" ] ] },
        "VpcId" : {"Ref" : "TransitVPC"}
      }
    },
    "VPCPubSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "VPCPubSub11" },
        "RouteTableId" : { "Ref" : "VPCRouteTable" }
      }
    },
    "VPCPubSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "VPCPubSub12" },
        "RouteTableId" : { "Ref" : "VPCRouteTable" }
      }
    },
    "VPCPubSubnetRouteTableAssociation3" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "VPCPubSub21" },
        "RouteTableId" : { "Ref" : "VPCRouteTable" }
      }
    },
    "VPCPubSubnetRouteTableAssociation4" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "VPCPubSub22" },
        "RouteTableId" : { "Ref" : "VPCRouteTable" }
      }
    },
    "vSRXEip11" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },
    "vSRXEip12" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },
    "vSRXEip21" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },
    "vSRXEip22" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },
    "AssociateEIP11" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "vSRXEip11", "AllocationId" ]},
        "NetworkInterfaceId" : { "Ref" : "vSRXInterface11" }
      }
    },
    "AssociateEIP12" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "vSRXEip12", "AllocationId" ]},
        "NetworkInterfaceId" : { "Ref" : "vSRXInterface12" }
      }
    },
    "AssociateEIP21" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "vSRXEip21", "AllocationId" ]},
        "NetworkInterfaceId" : { "Ref" : "vSRXInterface21" }
      }
    },
    "AssociateEIP22" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "vSRXEip22", "AllocationId" ]},
        "NetworkInterfaceId" : { "Ref" : "vSRXInterface22" }
      }
    },
    "vSRXInterface11" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "vSRXRevenueInterface1",
        "SourceDestCheck" : "false",
        "GroupSet" : [ {"Ref" : "VSRXSecurityGroup"} ],
        "SubnetId" : { "Ref" : "VPCPubSub11"}
      }
    },
    "vSRXInterface12" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "vSRXRevenueInterface1",
        "SourceDestCheck" : "false",
        "GroupSet" : [ {"Ref" : "VSRXSecurityGroup"} ],
        "SubnetId" : { "Ref" : "VPCPubSub12"}
      }
    },
    "vSRXInterface21" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "vSRXRevenueInterface1",
        "SourceDestCheck" : "false",
        "GroupSet" : [ {"Ref" : "VSRXSecurityGroup"} ],
        "SubnetId" : { "Ref" : "VPCPubSub21"}
      }
    },
    "vSRXInterface22" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "vSRXRevenueInterface1",
        "SourceDestCheck" : "false",
        "GroupSet" : [ {"Ref" : "VSRXSecurityGroup"} ],
        "SubnetId" : { "Ref" : "VPCPubSub22"}
      }
    },
    "VpcvSRX1" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Launch Juniper VSRX1"
      },
      "Properties" : {
        "InstanceType" : { "Fn::FindInMap" : [ "vSRXInstance", { "Ref" : "VSRXType" }, "Type"] },
        "KeyName" : { "Ref" : "KeyName" },
        "DisableApiTermination" : {"Fn::If": ["EnableTerm", true, false ]},
        "ImageId"        : { "Fn::FindInMap" : [ "JunipervSRXAMI", { "Ref" : "AWS::Region" }, { "Ref" : "LicenseModel" } ] },
        "NetworkInterfaces" : [ { "NetworkInterfaceId" : {"Ref" : "vSRXInterface11"}, "DeviceIndex" : "0" },
                { "NetworkInterfaceId" : {"Ref" : "vSRXInterface12"}, "DeviceIndex" : "1" }],
        "Tags" : [
          { "Key" : "Name", "Value" : "Transit VPC VSRX1" }
        ]
      },
      "DependsOn" : "IGW"
    },
    "VpcvSRX2" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Launch Juniper VSRX2"
      },
      "Properties" : {
        "InstanceType" : { "Fn::FindInMap" : [ "vSRXInstance", { "Ref" : "VSRXType" }, "Type"] },
        "KeyName" : { "Ref" : "KeyName" },
        "DisableApiTermination" : {"Fn::If": ["EnableTerm", true, false ]},
        "ImageId"        : { "Fn::FindInMap" : [ "JunipervSRXAMI", { "Ref" : "AWS::Region" }, { "Ref" : "LicenseModel" } ] },
        "NetworkInterfaces" : [ { "NetworkInterfaceId" : {"Ref" : "vSRXInterface21"}, "DeviceIndex" : "0" },
                { "NetworkInterfaceId" : {"Ref" : "vSRXInterface22"}, "DeviceIndex" : "1" }],
        "Tags" : [
          { "Key" : "Name", "Value" : "Transit VPC VSRX2" }
        ]
      },
      "DependsOn" : "IGW"
    },
    "SolutionHelperRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          } ]
        },
        "Path": "/"
      }
   },
    "SolutionHelperRolePolicy" : {
      "Type": "AWS::IAM::Policy",
      "Properties": {
      "Roles" : [ { "Ref" : "SolutionHelperRole" } ],
          "PolicyName": "Solution_Helper_Permissions",
          "PolicyDocument": {
              "Version" : "2012-10-17",
          "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": { "Fn::Join" : ["", ["arn:aws:logs:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":log-group:/aws/lambda/*" ]]}
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:Encrypt",
            "kms:Decrypt",
            "kms:ReEncrypt*",
            "kms:GenerateDataKey*",
            "kms:DescribeKey"
          ],
          "Resource": { "Fn::Join" : ["", ["arn:aws:kms:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":key/", { "Ref" : "KMSKey" } ]]}
        },
        {
          "Effect": "Allow",
          "Action": [
                    "s3:PutBucketNotification"
          ],
          "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" } ]] }
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:*",
            "events:*",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
                "ec2:DescribeVpcs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [{ "Fn::GetAtt" : [ "JuniperConfigFunctionRole", "Arn" ] }, { "Fn::GetAtt" : [ "TransitVpcPollerRole", "Arn" ] }]
        },
        {
          "Effect": "Allow",
          "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
          ],
          "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" }, "/", {"Ref": "S3Prefix"}, "*" ]] }
        },
        {
          "Effect": "Allow",
          "Action": [
                    "s3:GetObject"
          ],
          "Resource": "arn:aws:s3:::solutions-reference/*"
        }
         ]
        }
      }
   },
    "SolutionHelper": {
      "Type": "AWS::Lambda::Function",
      "DependsOn" : "SolutionHelperRolePolicy",
      "Properties": {
        "Handler": "solution-helper.lambda_handler",
        "Role": { "Fn::GetAtt" : [ "SolutionHelperRole" , "Arn" ] },
        "Description": "Transit VPC: CloudFormation custom resource function invoked during transit VPC CloudFormation create, update, and delete stack operations.",
        "Code": {
          "S3Bucket": "solution-helper-test",
          "S3Key": "solution-helper-test.zip"
        },
        "Runtime": "python2.7",
        "Timeout": "60"
     }
   },
   "CreateRsaKey": {
     "Type": "Custom::LoadLambda",
     "Properties": {
       "ServiceToken": { "Fn::GetAtt" : ["SolutionHelper", "Arn"] },
       "Region": { "Ref": "AWS::Region" },
       "CreateSshKey" : { "Fn::Join": ["", [
        "{ 'Bucket' : '",{ "Ref" : "VPNConfigS3Bucket" },"', ",
        "'SSEKMSKeyId' : 'arn:aws:kms:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":key/", { "Ref" : "KMSKey" }, "', ", 
        "'PrivateKey' : '", { "Ref" : "S3Prefix" }, { "Fn::FindInMap" : [ "Function", "vSRX", "PrivateKey"]}, "', ", 
        "'PublicKey' : '", { "Ref" : "S3Prefix" }, { "Fn::FindInMap" : [ "Function", "vSRX", "PublicKey"]}, "' ",
        "}"
    ]] }
     }
   },
   "CreateRandomPassword": {
     "Type": "Custom::LoadLambda",
     "Properties": {
       "ServiceToken": { "Fn::GetAtt" : ["SolutionHelper", "Arn"] },
       "Region": { "Ref": "AWS::Region" },
       "CreateRandomPassword" : { "Fn::FindInMap" : [ "Function", "vSRX", "PasswordLength"]},
       "RandomPasswordSpecialCharacters": "False"
     }
   },
   "JuniperConfigFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          } ]
        },
        "Path": "/"
      }
   },
    "JuniperConfigFunctionRolePolicy" : {
      "Type": "AWS::IAM::Policy",
      "Properties": {
      "Roles" : [ { "Ref" : "JuniperConfigFunctionRole" } ],
          "PolicyName": "Juniper_Config_Permissions",
          "PolicyDocument": {
            "Version" : "2012-10-17",
        "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": { "Fn::Join" : ["", ["arn:aws:logs:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":log-group:/aws/lambda/*" ]]}
        },
        {
          "Effect": "Allow",
          "Action": [
                    "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DetachNetworkInterface",
                "ec2:DeleteNetworkInterface"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:Encrypt",
            "kms:Decrypt",
            "kms:ReEncrypt*",
            "kms:GenerateDataKey*",
            "kms:DescribeKey"
          ],
          "Resource": { "Fn::Join" : ["", ["arn:aws:kms:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":key/", { "Ref" : "KMSKey" } ]]}
        },
        {
          "Effect": "Allow",
          "Action": [
                    "s3:PutObject",
                    "s3:GetObject"
          ],
          "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" }, "/", {"Ref": "S3Prefix"}, "*" ]] }
        }
         ]
        }
      }
   },
   "JuniperConfigFunct": {
     "Type": "Custom::LoadLambda",
     "Properties": {
       "ServiceToken": { "Fn::GetAtt" : ["SolutionHelper", "Arn"] },
       "Region": { "Ref": "AWS::Region" },
       "LambdaCode": { "Fn::FindInMap" : [ "Function", "Configurator", "CodeLocation"]},
       "LambdaCodeRegion": { "Fn::FindInMap" : [ "Function", "Configurator", "CodeRegion"]},
       "FunctionName": { "Fn::Join": ["", [ { "Ref" : "AWS::StackName" }, "-", { "Fn::FindInMap" : [ "Function", "Configurator", "Name"]}   ]] },
       "Role": { "Fn::GetAtt" : [ "JuniperConfigFunctionRole", "Arn" ] },
       "Runtime": { "Fn::FindInMap" : [ "Function", "Configurator", "Runtime"]},
       "Description": { "Fn::FindInMap" : [ "Function", "Configurator", "Description"]},
       "Timeout": { "Fn::FindInMap" : [ "Function", "Configurator", "Timeout"]},
       "MemorySize": { "Fn::FindInMap" : [ "Function", "Configurator", "MemorySize"]},
       "VpcConfig" : { "Fn::Join": ["", [
        "{ 'SubnetIds': [",
            "'",{ "Ref" : "VPCPubSub11" }, "',",
            "'",{ "Ref" : "VPCPubSub21" }, "'],",
            "'SecurityGroupIds': [",
                    "'",{ "Ref" : "JuniperConfigSecurityGroup" }, "']",
            "}"
    ]] },
       "S3Event" : { "Fn::Join": ["", [
        "{ 'Bucket' : '",{ "Ref" : "VPNConfigS3Bucket" },"', ",
        "'EventPattern' : {",
            "'LambdaFunctionConfigurations' : [ {",
                        "'LambdaFunctionArn': 'Replace_by_SolutionHelper',",
                        "'Events': ['s3:ObjectCreated:Put' ],",
                        "'Filter': {",
                            "'Key': {",
                                "'FilterRules': [ {",
                                    "'Name': 'prefix',",
                                    "'Value': '",{ "Ref" : "S3Prefix" },"'",
                                    "}, {",
                                    "'Name': 'suffix',",
                                    "'Value': '.conf'",
                                    "} ] } }",
                            "} ] }",
        "}"
    ]] },
       "StoreInS3KMS" : { "Fn::Join": ["", [
        "[{ 'Bucket' : '",{ "Ref" : "VPNConfigS3Bucket" },"', ",
        "'Key' : '", { "Ref" : "S3Prefix" }, "transit_vpc_config.txt', ", 
        "'SSEKMSKeyId' : 'arn:aws:kms:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":key/", { "Ref" : "KMSKey" }, "', ", 
        "'Body': \"{",
            "'UUID':'",{"Fn::GetAtt": [ "CreateUniqueID", "UUID" ] },"',",
            "'SENDDATA':'",{"Ref" : "SendAnonymousData"},"',",
            "'EIP1':'",{ "Ref" : "vSRXEip12" },"',",
            "'EIP2':'",{ "Ref" : "vSRXEip22" },"',",
            "'PIP1':'",{ "Fn::GetAtt" : [ "VpcvSRX1", "PrivateIp" ] },"',",
            "'PIP2':'",{ "Fn::GetAtt" : [ "VpcvSRX2", "PrivateIp" ] },"',",
            "'BGP_ASN':",{ "Ref" : "BgpAsn" },",",
            "'PREFERRED_PATH_TAG':'",{ "Ref" : "PreferredPathTag" },"',",
            "'HUB_TAG':'",{ "Ref" : "SpokeTag" },"',",
            "'HUB_TAG_VALUE':'",{ "Ref" : "SpokeTagValue" },"',",
            "'USER_NAME':'",{ "Fn::FindInMap" : [ "Function", "vSRX", "UserName"]},"',",
            "'PRIVATE_KEY':'",{ "Fn::FindInMap" : [ "Function", "vSRX", "PrivateKey"]},"',",
            "'PUBLIC_KEY':'",{ "Fn::GetAtt" : [ "CreateRsaKey", "PubKey" ] },"',",
            "'PASSWORD':'",{ "Fn::GetAtt" : [ "CreateRandomPassword" , "Password" ] },"',",
            "'KMS_KEY':'arn:aws:kms:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":key/", { "Ref" : "KMSKey" },"'",
            "}\"",
        "}]"
    ]] }
     }
   },
   "TransitVpcPollerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          } ]
        },
        "Path": "/"
      }
    },
    "TransitVpcPollerRolePolicy" : {
      "Type": "AWS::IAM::Policy",
      "Properties": {
      "Roles" : [ { "Ref" : "TransitVpcPollerRole" } ],
          "PolicyName": "Transit_VPC_Poller_Function_Permissions",
          "PolicyDocument": {
              "Version" : "2012-10-17",
          "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": { "Fn::Join" : ["", ["arn:aws:logs:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":log-group:/aws/lambda/*" ]]}
        },
        {
          "Effect": "Allow",
          "Action": [
                    "ec2:Describe*",
                    "ec2:CreateTags",
                    "ec2:CreateCustomerGateway",
                    "ec2:DeleteCustomerGateway",
                    "ec2:CreateVpnConnection",
                    "ec2:DeleteVpnConnection"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:Encrypt",
            "kms:Decrypt",
            "kms:ReEncrypt*",
            "kms:GenerateDataKey*",
            "kms:DescribeKey"
          ],
          "Resource": { "Fn::Join" : ["", ["arn:aws:kms:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":key/", { "Ref" : "KMSKey" } ]]}
        },
        {
          "Effect": "Allow",
          "Action": [
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:GetObject"
          ],
          "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" }, "/", {"Ref": "S3Prefix"}, "*"   ]] }
        }
         ]
        }
      } 
    },
   "PollerFunct": {
     "DependsOn" : "JuniperConfigFunct",
     "Type": "Custom::LoadLambda",
     "Properties": {
       "ServiceToken": { "Fn::GetAtt" : ["SolutionHelper", "Arn"] },
       "Region": { "Ref": "AWS::Region" },
       "LambdaCode": { "Fn::FindInMap" : [ "Function", "Poller", "CodeLocation"]},
       "LambdaCodeRegion": { "Fn::FindInMap" : [ "Function", "Poller", "CodeRegion"]},
       "Deliminator": { "Fn::FindInMap" : [ "Function", "FindReplace", "Deliminator"]},
       "FunctionName": { "Fn::Join": ["", [ { "Ref" : "AWS::StackName" }, "-", { "Fn::FindInMap" : [ "Function", "Poller", "Name"]} ]] },
       "Role": { "Fn::GetAtt" : [ "TransitVpcPollerRole", "Arn" ] },
       "CloudWatchEvent" : { "Fn::Join": ["", [
        "{ 'RuleName' : '",{ "Ref" : "AWS::StackName" },"-VGW-Poller-1min', ",
        "'ScheduleExpression' : 'cron(* * * * ? *)',",
        "'Description': 'Transit VPC: Rule to trigger VGW-Poller every minute to find VGWs that need to be attached to the transit VPC.' }"
    ]] },
       "Runtime": { "Fn::FindInMap" : [ "Function", "Poller", "Runtime"]},
       "Description": { "Fn::FindInMap" : [ "Function", "Poller", "Description"]},
       "Timeout": { "Fn::FindInMap" : [ "Function", "Poller", "Timeout"]},
       "MemorySize": { "Fn::FindInMap" : [ "Function", "Poller", "MemorySize"]},
       "FindReplace" : { "Fn::Join": ["", [
        { "Fn::FindInMap" : [ "Function", "FindReplace", "S3BucketID"]},
        { "Fn::FindInMap" : [ "Function", "FindReplace", "Deliminator"]},
        { "Ref" : "VPNConfigS3Bucket" },",",
        { "Fn::FindInMap" : [ "Function", "FindReplace", "S3PrefixID"]},
        { "Fn::FindInMap" : [ "Function", "FindReplace", "Deliminator"]},
        { "Ref" : "S3Prefix" }
    ]] }
     }
   },
    "VSRXSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "VSRX Security Group Rules",
        "VpcId" : { "Ref" : "TransitVPC" },
        "SecurityGroupIngress" : [
           { "IpProtocol" : "-1", "FromPort" : "22",  "ToPort" : "22",  "SourceSecurityGroupId" : { "Ref" : "JuniperConfigSecurityGroup" }}
           ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "-1", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" } ]
      }
    },
    "JuniperConfigSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Transit VPC Automation Security Group Rules",
        "VpcId" : { "Ref" : "TransitVPC" },
        "SecurityGroupEgress" : [{ "IpProtocol" : "-1", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" }]
      }
    },
    "SSHtoVSRX": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "VSRXSecurityGroup",
            "GroupId"
          ]
        },
        "GroupId": {
          "Fn::GetAtt": [
            "JuniperConfigSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "VSRX1RecoveryAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Trigger a recovery when VSRX1 instance status check fails for 15 consecutive minutes.",
        "Namespace": "AWS/EC2" ,
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "35",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [ {"Fn::Join" : ["", ["arn:aws:automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]} ],
        "Dimensions": [{"Name": "InstanceId","Value": {"Ref": "VpcvSRX1"}}]
      }
    },
    "VSRX2RecoveryAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Trigger a recovery when VSRX2 instance status check fails for 15 consecutive minutes.",
        "Namespace": "AWS/EC2" ,
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "35",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [ {"Fn::Join" : ["", ["arn:aws:automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]} ],
        "Dimensions": [{"Name": "InstanceId","Value": {"Ref": "VpcvSRX2"}}]
      }
    },
    "CreateUniqueID": {
         "Type": "Custom::LoadLambda",
         "Properties": {
             "ServiceToken": { "Fn::GetAtt": ["SolutionHelper", "Arn"] },
             "Region": { "Ref": "AWS::Region" },
             "CreateUniqueID": "true"
         }
    },
    "SendingData": {
        "Type": "Custom::LoadLambda",
        "Condition" : "SendData",
        "Properties": {
            "ServiceToken": { "Fn::GetAtt": ["SolutionHelper", "Arn"] },
            "SendAnonymousData": { "Fn::Join": ["", [
                "{ 'Solution' : '", "SO0001", "', ",
                  "'UUID' : '", {"Fn::GetAtt": ["CreateUniqueID", "UUID"]}, "', ",
                  "'Data': {", "'VSRXType': '", {"Ref": "VSRXType"}, "',",
                               "'LicenseModel': '", {"Ref": "LicenseModel"}, "'",
                          "}",
                "}"
              ]]
            }
        }
    }
  },
  "Outputs" : {
    "VSRX1" : {
      "Description" : "IP Address for VSRX1",
      "Value" : { "Fn::GetAtt" : [ "VpcvSRX1", "PublicIp" ] } 
    },
    "VSRX2" : {
      "Description" : "IP Address for VSRX2",
      "Value" : { "Fn::GetAtt" : [ "VpcvSRX2", "PublicIp" ] } 
    },
    "ConfigS3Bucket" : {
      "Description" : "S3 bucket for storing VPN configuration information.",
      "Value" : { "Ref" : "VPNConfigS3Bucket" } 
    },
    "BucketPrefix" : {
      "Description" : "S3 prefix for storing VPN configuration information.",
      "Value" : { "Ref" : "S3Prefix" } 
    },
    "SpokeVPCTag" : {
      "Description" : "Tag used to identify spoke VPCs.",
      "Value" : { "Ref": "SpokeTag" } 
    },
    "SpokeVPCTagValue" : {
      "Description" : "Tag valued used to idenfity spoke VPCs.",
      "Value" : { "Ref": "SpokeTagValue" } 
    },
    "PreferredPathTagName" : {
      "Description" : "Tag used to identify the spoke VPC preferred path.",
      "Value" : { "Ref": "PreferredPathTag" } 
    },
    "UUID": {
      "Description": "Newly created random UUID.",
      "Value": { "Fn::GetAtt": [ "CreateUniqueID", "UUID" ] } 
    }
  }
}